accessible: true
author: Olivier Bonaventure
categories:
- reliable
context: |-
    .. raw:: html

       <script defer>
       bodyHeight = 0;
       function postSize() {
           if (document.body.scrollHeight != bodyHeight) {
               bodyHeight = document.body.scrollHeight;
               window.parent.postMessage({height: bodyHeight}, "*");
           }
       };
       var target = document.querySelector('body');

       var observer = new MutationObserver(postSize);

       var config = { attributes: true, subtree: true }

       observer.observe(target, config);
       $(document).ready(function(){
           document.querySelector('#content').style.minHeight = '';
           setTimeout(postSize, 0);
       });
       </script>
environment: mcq
evaluate: best
file: ''
groups: false
input_random: '0'
limits:
    memory: '100'
    time: '30'
    output: '2'
name: Alternating Bit Protocol
network_grading: false
order: 1
problems:
    q1:
        choices:
        -   valid: true
            text: 'If the right host receives `D(1,x)`, it will ignore the frame and
                reply with `C(OK1)`.  '
        -   text: 'If the left host receives `C(OK,0)`, it will retransmit the frame
                `D(1,x)`. '
            valid: true
        -   text: |
                If the right host receives `D(1,x)`, it will ignore the frame and reply with `C(OK0)`.
        -   text: If the right host receives `D(0,x)`, it will ignore the frame and
                reply with `C(OK1)`.
        -   text: If the right host receives `D(0,x)`, it will accept the frame and
                reply with `C(OK0)`.
        type: multiple_choice
        header: |
            After having correctly transmitted several frames, a host sends a data frame that is correctly acknowledged. This corresponds to the situation shown in the figure below:

            .. container:: text-center

                .. image:: mcq-rel-abp/figure1.png
        name: Alternating Bit Protocol
        limit: 3
    q2:
        choices:
        -   feedback: This example is correct. It could correspond to a scenario where
                the host on the left sent some data until it reached sequence number
                0 and then become idle before sending data `y`.
            valid: true
            text: |-
                .. container:: text-center

                    .. image:: mcq-rel-abp/figure2a.png
        -   text: |-
                .. container:: text-center

                    .. image:: mcq-rel-abp/figure2b.png
            feedback: |
                This scenario is incorrect. The same sequence number is used incorrectly to send `x` and `y`.
        -   feedback: |4
                        This scenario is incorrect. The host on the right should not send `C(OK1)` after having received `D(0,x)`
            text: |-
                .. container:: text-center

                    .. image:: mcq-rel-abp/figure2c.png
        name: ''
        limit: 0
        type: multiple_choice
        header: Consider a host on the left that needs to transmit 2 bytes of data
            to the host on right. Among the following time sequence diagrams, which
            is the one that corresponds to a successful transmission of these two
            bytes ?
    q3:
        choices:
        -   valid: true
            text: |-
                .. container:: text-center

                    .. image:: mcq-rel-abp/figure3a.png
        -   valid: true
            text: |-
                .. container:: text-center

                    .. image:: mcq-rel-abp/figure3b.png
        -   feedback: This example is incorrect. The second frame is a retransmission
                for the host on the right since it carries the same sequence number.
                It should never delivery the data to its user.
            text: |-
                .. container:: text-center

                    .. image:: mcq-rel-abp/figure3c.png
        -   text: |-
                .. container:: text-center

                    .. image:: mcq-rel-abp/figure3d.png
            feedback: This example is incorrect. The second frame is a retransmission
                for the host on the right since it carries the same sequence number.
                It should never delivery the data to its user.
        -   feedback: This example is incorrect. The acknowledgements sent by the
                host on the right are incorrect. When receiving `D(1,d)` and accepting
                it since it issues a `Data.ind(d)`, it should not send `C(OK0)` but
                instead `C(OK1)`.
            text: |-
                .. container:: text-center

                    .. image:: mcq-rel-abp/figure3e.png
        name: Sending the same information twice
        header: 'Sometimes, a host needs to send the same information twice. Consider
            a host that sends `d` followed by `d`. What is the correct time sequence
            diagram for this scenario ? '
        type: multiple_choice
        limit: 3
run_cmd: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
