#!/bin/python3

# Olivier Bonaventure, 2019

from inginious import input, feedback
import re


def valid(string):
    if re.search(r'R=(\d+),C=(\d+),T=(\d+)', string, re.I):
        return True
    else:
        return False

def removeSpaces(string):
    return re.sub('[\s+]', '', string)


def getR(string):
    s= (removeSpaces(string.upper()))
    r=re.search(r'R=(\d+),.*', string, re.I)
    if r:
        return int(r.group(1))
    else:
        return None
    
def getC(string):
    s= (removeSpaces(string.upper()))
    r=re.search(r'.*,C=(\d+),.*', string, re.I)
    if r:
        return int(r.group(1))
    else:
        return None
    
def getT(string):
    s= (removeSpaces(string.upper()))
    r=re.search(r'.*T=(\d+)\.(\d+)', string, re.I)
    if r:
        return int(r.group(1))
    else:
        return None

# expected answer: R=9,C=6,T=32.1
    
def check(bpdu):
    response = ""    
    if not valid(bpdu):
        feedback.set_problem_result("failed", "bpdu")
        response += "The format of your BPDU is incorect. Please encode it as R=123,C=456,T=7.9\n"
        feedback.set_problem_feedback(response, "bpdu")
        return 0


    errors = 0
    grade = 0
    if(getR(bpdu)!=9):
        errors+=1
        response+="Check the root identifier of your BPDU.\n"

    if(getC(bpdu)!=6):
        errors+=1
        response+="Check the cost of your BPDU.\n"

    if(getT(bpdu)!=32):
        errors+=1
        response+="Check the transmitter identifier of your BPDU.\n"+str(getT(bpdu))

    if(errors > 0):
        feedback.set_problem_result("failed", "bpdu")
        response += "Your answer to this question is incorrect.\n"
        feedback.set_problem_feedback(response, "bpdu")
    else:
        feedback.set_problem_result("success", "bpdu")
        feedback.set_problem_feedback("Correct", "bpdu")
        grade += 25

    return grade

grade = check(input.get_input("bpdu"))


feedback.set_grade(grade)

if grade ==100:
    feedback.set_global_result("success")
else:
    feedback.set_global_result("failed")
# end
